# Firmware configuration file for qemuarm64-secureboot system
require-fwup-version="1.4.0"

define(UBOOT_ENV_OFFSET, "${PERIDIO_UBOOT_ENV_OFFSET}")
define(UBOOT_ENV_COUNT, "${PERIDIO_UBOOT_ENV_COUNT}")
define-eval(UBOOT_ENV_REDUND_OFFSET, "${PERIDIO_UBOOT_ENV_OFFSET} + ${UBOOT_ENV_COUNT} * 2")

# Boot
define(BOOT_A_PART_OFFSET, "${PERIDIO_BOOTFS_OFFSET_BLOCKS}")
define-eval(BOOT_A_PART_COUNT, "${PERIDIO_BOOTFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")
define-eval(BOOT_B_PART_OFFSET, "${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}")
define(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT})

# RootFS
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_B_PART_OFFSET} + ${BOOT_B_PART_COUNT}")
define-eval(ROOTFS_A_PART_COUNT, "${PERIDIO_ROOTFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Data
define-eval(DATA_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define-eval(DATA_PART_COUNT, "${PERIDIO_DATAFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")

# Firmware archive metadata
meta-product = ${PERIDIO_META_PRODUCT}
meta-description = ${PERIDIO_META_DESCRIPTION}
meta-version = ${PERIDIO_META_VERSION}
meta-platform = ${PERIDIO_META_PLATFORM}
meta-architecture = ${PERIDIO_META_ARCHITECTURE}
meta-author = ${PERIDIO_META_AUTHOR}
meta-vcs-identifier = ${PERIDIO_META_VCS_IDENTIFIER}
meta-misc = ${PERIDIO_META_MISC}

mbr mbr-a {
    bootstrap-code-host-path = "${PERIDIO_HOST_IMAGE_DIR}/u-boot.bin.sd.ssb.bin"

    partition 0 {
            block-offset = ${BOOT_A_PART_OFFSET}
            block-count = ${BOOT_A_PART_COUNT}
            type = 0x1 # FAT12
            boot = true
    }
    partition 1 {
            block-offset = ${ROOTFS_A_PART_OFFSET}
            block-count = ${ROOTFS_A_PART_COUNT}
            type = 0x83 # Linux
    }
    partition 3 {
            block-offset = ${DATA_PART_OFFSET}
            block-count = ${DATA_PART_COUNT}
            type = 0x83 # Linux
            expand = true
    }
}

mbr mbr-b {
    bootstrap-code-host-path = "${PERIDIO_HOST_IMAGE_DIR}/u-boot.bin.sd.ssb.bin"

    partition 0 {
            block-offset = ${BOOT_B_PART_OFFSET}
            block-count = ${BOOT_B_PART_COUNT}
            type = 0x1 # FAT12
            boot = true
    }
    partition 1 {
            block-offset = ${ROOTFS_B_PART_OFFSET}
            block-count = ${ROOTFS_B_PART_COUNT}
            type = 0x83 # Linux
    }
    partition 3 {
            block-offset = ${DATA_PART_OFFSET}
            block-count = ${DATA_PART_COUNT}
            type = 0x83 # Linux
            expand = true
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
    block-offset-redund = ${UBOOT_ENV_REDUND_OFFSET}
}

file-resource uboot.tsb.bin {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/u-boot.bin.sd.tsb.bin"
}
file-resource uboot.env {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/uboot.env"
}
file-resource fitImage {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/fitImage-avocado-image-initramfs-khadas-vim3-khadas-vim3"
}
file-resource rootfs.img {
    host-path = "${PERIDIO_HOST_ROOTFS_DIR}/${PERIDIO_ROOTFS_FILE}"

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run for the first installation.
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr-a)
        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
    }

    on-resource uboot.env {
        raw_write(${UBOOT_ENV_OFFSET})

        uboot_setenv(uboot-env, "peridio_key", "\${PERIDIO_PRIVATE_KEY}")
        uboot_setenv(uboot-env, "peridio_certificate", "\${PERIDIO_CERTIFICATE}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_validated", "1")
        uboot_setenv(uboot-env, "peridio_autovalidate", "1")
        uboot_setenv(uboot-env, "peridio_booted", "0")
        uboot_setenv(uboot-env, "peridio_initramfs_shell", "0")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_DISK_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_A_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_A_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")
    }

    on-resource uboot.tsb.bin { raw_write(1) }
    on-resource fitImage { fat_write(${BOOT_A_PART_OFFSET}, "fitImage") }
    on-resource rootfs.img { raw_write(${ROOTFS_A_PART_OFFSET}) }

    on-finish {
      # Clear out any old data in the B partition that might be mistaken for
      # a file system. This is mostly to avoid confusion in humans when
      # reprogramming SDCards with unknown contents.
      raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

      # Invalidate the application data partition so that it is guaranteed to
      # trigger the corrupt filesystem detection code on first boot and get
      # formatted.
      raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition, so make sure we're running
    # on B.
    require-uboot-variable(uboot-env, "peridio_active", "b")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.peridio_version")
        uboot_unsetenv(uboot-env, "a.peridio_platform")
        uboot_unsetenv(uboot-env, "a.peridio_architecture")
        uboot_unsetenv(uboot-env, "a.peridio_uuid")

        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
    }

    on-resource fitImage { fat_write(${BOOT_A_PART_OFFSET}, "fitImage") }
    on-resource rootfs.img {
      delta-source-raw-offset=${ROOTFS_B_PART_OFFSET}
      delta-source-raw-count=${ROOTFS_B_PART_COUNT}
      raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Update firmware metedata
        uboot_setenv(uboot-env, "peridio_validated", "0")
        uboot_setenv(uboot-env, "peridio_booted", "0")
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_A_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_A_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        mbr_write(mbr-a)
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition, so make sure we're running
    # on A.
    require-uboot-variable(uboot-env, "peridio_active", "a")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")

    on-init {
      info("Upgrading partition B")

      # Clear some firmware information just in case this update gets
      # interrupted midway.
      uboot_unsetenv(uboot-env, "b.peridio_version")
      uboot_unsetenv(uboot-env, "b.peridio_platform")
      uboot_unsetenv(uboot-env, "b.peridio_architecture")
      uboot_unsetenv(uboot-env, "b.peridio_uuid")

      fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
      fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")

      trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    on-resource fitImage { fat_write(${BOOT_B_PART_OFFSET}, "fitImage") }
    on-resource rootfs.img {
      delta-source-raw-offset=${ROOTFS_A_PART_OFFSET}
      delta-source-raw-count=${ROOTFS_A_PART_COUNT}
      raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "peridio_validated", "0")
        uboot_setenv(uboot-env, "peridio_booted", "0")
        uboot_setenv(uboot-env, "b.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_B_PART_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_B_PART_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "b.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "b.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "b.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "b.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "b.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "b.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "b.peridio_uuid", "\${FWUP_META_UUID}")

        # Reset the validation status and boot to B next time.
        uboot_setenv(uboot-env, "peridio_active", "b")
        mbr_write(mbr-b)
    }
}

task upgrade.wrong {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_META_PLATFORM} and architecture=${PERIDIO_META_ARCHITECTURE}")
    }
}
