require-fwup-version="1.0.0"

# This configuration file will create an image that
# has a GPT partition structure with following layout:
#
# +----------------------------+
# | GPT                        |
# +----------------------------+
# | p0: imx-boot               |
# +----------------------------+
# | p1: U-Boot environment     |
# +----------------------------+
# | p2: Boot A                 |
# +----------------------------+
# | p3: Boot B                 |
# +----------------------------+
# | p4: Rootfs A               |
# +----------------------------+
# | p5: Rootfs B               |
# +----------------------------+
# | p6: Data                   |
# +----------------------------+

# imx-boot
define-eval(IMX_BOOT_OFFSET, "${IMX_BOOT_SEEK} * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")
define-eval(IMX_BOOT_COUNT, "${IMX_BOOT_COUNT}")

# U-Boot environment
define-eval(UBOOT_ENV_OFFSET, "${PERIDIO_UBOOT_ENV_OFFSET}")
define(UBOOT_ENV_COUNT, "${PERIDIO_UBOOT_ENV_COUNT}")
define-eval(UBOOT_ENV_REDUND_OFFSET, "${UBOOT_ENV_OFFSET} + ${UBOOT_ENV_COUNT} * 2")

# The boot partition
define-eval(BOOT_A_PART_OFFSET, "${UBOOT_ENV_REDUND_OFFSET} + ${UBOOT_ENV_COUNT} * 2")
define-eval(BOOT_A_PART_COUNT, "${PERIDIO_BOOTFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")
define-eval(BOOT_B_PART_OFFSET, "${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}")
define(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT})

# Root FS
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_B_PART_OFFSET} + ${BOOT_B_PART_COUNT}")
define-eval(ROOTFS_A_PART_COUNT, "${PERIDIO_ROOTFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")
define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT})

# Application partition. This partition can occupy all of the remaining space.
# Size it to fit the destination.
define-eval(DATA_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define-eval(DATA_PART_COUNT, "${PERIDIO_DATAFS_SIZE_MB} * 1024 * 1024 / ${PERIDIO_DISK_BLOCK_SIZE}")

define(PERIDIO_DISK_UUID, "173a9e81-a443-4ae1-9b0b-9984c935a1e6")
define(PERIDIO_DISK_IMX_BOOT_UUID, "c3593839-3db7-471f-85e1-79b9bbe1d5f2")
define(PERIDIO_DISK_UBOOT_ENV_UUID, "427b87d3-3c7c-485d-ba55-63078787c57f")
define(PERIDIO_DISK_BOOT_A_UUID, "d19f40a2-8740-4913-b770-fe7c7d226a8d")
define(PERIDIO_DISK_BOOT_B_UUID, "acc0ea19-84a9-4241-a741-764a002905fb")
define(PERIDIO_DISK_ROOTFS_A_UUID, "5441d1a4-93fa-4e6d-b569-3de2060d26dc")
define(PERIDIO_DISK_ROOTFS_B_UUID, "94fc60e9-8052-49f2-a03d-5ace48ff1b93")
define(PERIDIO_DISK_DATA_UUID, "9ceb6f7e-cce8-4838-889c-3d08eeba3de8")

define(GPT_DISK_BOOT_DATA_TYPE, "21686148-6449-6e6f-744e-656564454649")
define(GPT_DISK_LINUX_DATA_TYPE, "0fc63daf-8483-4772-8e79-3d69d8477de4")

# Firmware archive metadata
meta-product = ${PERIDIO_META_PRODUCT}
meta-description = ${PERIDIO_META_DESCRIPTION}
meta-version = ${PERIDIO_META_VERSION}
meta-platform = ${PERIDIO_META_PLATFORM}
meta-architecture = ${PERIDIO_META_ARCHITECTURE}
meta-author = ${PERIDIO_META_AUTHOR}
meta-vcs-identifier = ${PERIDIO_META_VCS_IDENTIFIER}
meta-misc = ${PERIDIO_META_MISC}

gpt gpt {
    guid = ${PERIDIO_DISK_UUID}

    partition 0 {
        block-offset = ${IMX_BOOT_OFFSET}
        block-count = ${IMX_BOOT_COUNT}
        type = ${GPT_DISK_BOOT_DATA_TYPE}
        guid = ${PERIDIO_DISK_IMX_BOOT_UUID}
        name = "imxboot"
    }

    partition 1 {
        block-offset = ${UBOOT_ENV_OFFSET}
        block-count = ${UBOOT_ENV_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_UBOOT_ENV_UUID}
        name = "ubootenv"
    }

    partition 2 {
        block-offset = ${BOOT_A_PART_OFFSET}
        block-count = ${BOOT_A_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_BOOT_A_UUID}
        name = "boot-a"
    }
    partition 3 {
        block-offset = ${BOOT_B_PART_OFFSET}
        block-count = ${BOOT_B_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_BOOT_B_UUID}
        name = "boot-b"
    }
    partition 4 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_ROOTFS_A_UUID}
        name = "rootfs-a"
    }
    partition 5 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_ROOTFS_B_UUID}
        name = "rootfs-b"
    }
    partition 6 {
        block-offset = ${DATA_PART_OFFSET}
        block-count = ${DATA_PART_COUNT}
        type = ${GPT_DISK_LINUX_DATA_TYPE}
        guid = ${PERIDIO_DISK_DATA_UUID}
        name = "data"
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
    block-offset-redund = ${UBOOT_ENV_REDUND_OFFSET}
}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource imx-boot {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/imx-boot"

    # Error out if the imx-boot size exceeds the partition size
    assert-size-lte = ${IMX_BOOT_COUNT}
}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource uboot.env {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/uboot.env"

    # Error out if the U-boot env size exceeds the partition size
    assert-size-lte = ${UBOOT_ENV_COUNT}
}

file-resource fitImage {
    host-path = "${PERIDIO_HOST_IMAGE_DIR}/fitImage-avocado-image-initramfs-${MACHINE}-${MACHINE}"
}

file-resource rootfs.img {
    host-path = "${PERIDIO_HOST_ROOTFS_DIR}/${PERIDIO_ROOTFS_FILE}"

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run at the factory to initialize a board!
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        gpt_write(gpt)

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
    }

    on-resource imx-boot {
        raw_write(${IMX_BOOT_OFFSET})
    }

    on-resource uboot.env {
        raw_write(${UBOOT_ENV_OFFSET})

        uboot_setenv(uboot-env, "peridio_key", "\${PERIDIO_PRIVATE_KEY}")
        uboot_setenv(uboot-env, "peridio_certificate", "\${PERIDIO_CERTIFICATE}")

        uboot_setenv(uboot-env, "peridio_active", "a")
        uboot_setenv(uboot-env, "peridio_validated", "1")
        uboot_setenv(uboot-env, "peridio_autovalidate", "1")
        uboot_setenv(uboot-env, "peridio_booted", "0")
        uboot_setenv(uboot-env, "peridio_disk_devpath", ${PERIDIO_DISK_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_A_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_A_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")
    }

    on-resource fitImage { fat_write(${BOOT_A_PART_OFFSET}, "fitImage")}

    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Clear out any old data in the B partition that might be mistaken for
        # a file system. This is mostly to avoid confusion in humans when
        # reprogramming SDCards with unknown contents.
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${DATA_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    require-uboot-variable(uboot-env, "peridio_active", "b")
    require-uboot-variable(uboot-env, "peridio_validated", "1")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "b.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.peridio_version")
        uboot_unsetenv(uboot-env, "a.peridio_platform")
        uboot_unsetenv(uboot-env, "a.peridio_architecture")
        uboot_unsetenv(uboot-env, "a.peridio_uuid")

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    on-resource fitImage { fat_write(${BOOT_A_PART_OFFSET}, "fitImage")}

    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_B_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_B_PART_COUNT}
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_A_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_A_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "a.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "a.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "a.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "a.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "a.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "a.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "a.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "a.peridio_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_validated", "0")
        uboot_setenv(uboot-env, "peridio_booted", "0")
        uboot_setenv(uboot-env, "peridio_active", "a")
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    require-uboot-variable(uboot-env, "peridio_active", "a")
    require-uboot-variable(uboot-env, "peridio_validated", "1")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")

    on-init {
        info("Upgrading partition B")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "b.peridio_version")
        uboot_unsetenv(uboot-env, "b.peridio_platform")
        uboot_unsetenv(uboot-env, "b.peridio_architecture")
        uboot_unsetenv(uboot-env, "b.peridio_uuid")

        fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
        fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")

        trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    on-resource fitImage { fat_write(${BOOT_B_PART_OFFSET}, "fitImage")}

    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_A_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_A_PART_COUNT}
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "b.peridio_rootfs_part_devpath", ${PERIDIO_ROOTFS_B_PART_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_rootfs_part_type", ${PERIDIO_ROOTFS_B_PART_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_devpath", ${PERIDIO_DATAFS_PART_DEVPATH})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_type", ${PERIDIO_DATAFS_PART_TYPE})
        uboot_setenv(uboot-env, "b.peridio_datafs_part_mountpoint", ${PERIDIO_DATAFS_PART_MOUNTPOINT})
        uboot_setenv(uboot-env, "b.peridio_product", ${PERIDIO_META_PRODUCT})
        uboot_setenv(uboot-env, "b.peridio_description", ${PERIDIO_META_DESCRIPTION})
        uboot_setenv(uboot-env, "b.peridio_version", ${PERIDIO_META_VERSION})
        uboot_setenv(uboot-env, "b.peridio_platform", ${PERIDIO_META_PLATFORM})
        uboot_setenv(uboot-env, "b.peridio_architecture", ${PERIDIO_META_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.peridio_author", ${PERIDIO_META_AUTHOR})
        uboot_setenv(uboot-env, "b.peridio_vcs_identifier", ${PERIDIO_META_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.peridio_misc", ${PERIDIO_META_MISC})
        uboot_setenv(uboot-env, "b.peridio_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "peridio_validated", "0")
        uboot_setenv(uboot-env, "peridio_booted", "0")
        uboot_setenv(uboot-env, "peridio_active", "b")
    }

    on-error {
    }
}

task upgrade.unvalidated {
    require-uboot-variable(uboot-env, "peridio_validated", "0")

    on-init {
        error("Please validate the running firmware before upgrading it again.")
    }
}

task upgrade.unexpected {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_META_PLATFORM} and architecture=${PERIDIO_META_ARCHITECTURE}")
    }
}

task validate {
    on-init {
        uboot_setenv(uboot-env, "peridio_validated", "1")
    }
}

task provision {
    require-uboot-variable(uboot-env, "a.peridio_platform", "${PERIDIO_META_PLATFORM}")
    require-uboot-variable(uboot-env, "a.peridio_architecture", "${PERIDIO_META_ARCHITECTURE}")
    on-init {

    }
}
task provision.wrongplatform {
    on-init {
        error("Expecting platform=${PERIDIO_META_PLATFORM} and architecture=${PERIDIO_META_ARCHITECTURE}")
    }
}
